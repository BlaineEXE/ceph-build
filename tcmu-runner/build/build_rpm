#! /usr/bin/bash
set -ex

BRANCH=`branch_slash_filter $BRANCH`
CEPH_BRANCH=$(branch_slash_filter $CEPH_BRANCH)

# Only do actual work when we are an RPM distro
if test "$DISTRO" != "fedora" -a "$DISTRO" != "centos" -a "$DISTRO" != "rhel"; then
    exit 0
fi

RELEASE="$(lsb_release --short -r | cut -d '.' -f 1)" # sytem release

## Get the desired CEPH_BRANCH/CEPH_SHA1 ceph repo
# Get .repo file from appropriate shaman build
REPO_URL="https://shaman.ceph.com/api/repos/ceph/$CEPH_BRANCH/$CEPH_SHA1/$DISTRO/$RELEASE/flavors/default/repo"
TIME_LIMIT=1200
INTERVAL=30
REPO_FOUND=0

# poll shaman for up to 10 minutes
while [ "$SECONDS" -le "$TIME_LIMIT" ]
do
  if `curl --fail -L $REPO_URL > $WORKSPACE/shaman.repo`; then
    echo "Ceph repo file has been added from shaman"
    REPO_FOUND=1
    break
  else
    sleep $INTERVAL
  fi
done

if [[ "$REPO_FOUND" -eq 0 ]]; then
  echo "Ceph lib repo does NOT exist in shaman"
  exit 1
fi

function cleanup() {
  sudo rm -rf /etc/yum.repos.d/shaman.repo || true
}
trap cleanup EXIT

# Copy the repo
sudo cp $WORKSPACE/shaman.repo /etc/yum.repos.d/

## Install any setup-time deps
# We need these for the build
sudo yum install -y cmake kernel-headers glib2-devel libnl3-devel \
                    glusterfs-api-devel kmod-devel zlib-devel librbd1-devel

# We use fpm to create the package
sudo yum install -y rubygems ruby-devel
sudo gem install fpm

# Mimic koji/brew environment
export CFLAGS='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic'
export CXXFLAGS='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic'
export LDFLAGS='-Wl,-z,relro '

# Prepare the build
DESTDIR="install.tmp"
install -d -m0755 -- "$DESTDIR"
cmake -DCMAKE_C_FLAGS_RELEASE:STRING=-DNDEBUG \
      -DCMAKE_CXX_FLAGS_RELEASE:STRING=-DNDEBUG \
      -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
      -DCMAKE_INSTALL_PREFIX:PATH='/usr' \
      -DLIB_SUFFIX=64 \
      -DBUILD_SHARED_LIBS:BOOL=ON \
      -DSUPPORT_SYSTEMD=ON .

# Perform the build and install the files to DESTDIR
NCPU=$(grep -c processor /proc/cpuinfo)
make -j$NCPU

make -j$NCPU install DESTDIR=${DESTDIR}
gzip ${DESTDIR}/usr/share/man/man8/tcmu-runner.8


## Get some basic information about the system and the repository
# Get version
RELEASE="$(lsb_release --short -r | cut -d '.' -f 1)" # system release
VERSION="$(git describe --abbrev=0 --tags HEAD | cut -d - -f 1)"
REVISION="$(git describe --tags HEAD | cut -d - -f 2- | sed 's/-/./g' | sed 's/^rc/0./')"
if [ "$VERSION" = "$REVISION" ]; then
  REVISION="1"
fi

## Create the package
# Make sure there are no other packages, first
rm -f *.rpm

# Create the package
fpm -s dir -t rpm -n tcmu-runner -C ${DESTDIR} \
    -v ${VERSION} --iteration ${REVISION} \
    --exclude usr/lib64/libtcmu.so*

cat > SCRIPTLET <<EOF
/sbin/ldconfig
EOF
fpm -s dir -t rpm -n libtcmu -C ${DESTDIR} \
    -v ${VERSION} --iteration ${REVISION} \
    --after-install SCRIPTLET \
    --after-remove SCRIPTLET \
    usr/lib64/libtcmu.so.2

fpm -s dir -t rpm -n libtcmu-devel -C ${DESTDIR} \
    -v ${VERSION} --iteration ${REVISION} \
    -d "libtcmu = ${VERSION}-${REVISION}" \
    usr/lib64/libtcmu.so


## Upload the created RPMs to chacra
chacra_endpoint="tcmu-runner/${BRANCH}/${GIT_COMMIT}/${DISTRO}/${RELEASE}"

[ "$FORCE" = true ] && chacra_flags="--force" || chacra_flags=""

# push binaries to chacra
find *.rpm | $VENV/chacractl binary ${chacra_flags} create ${chacra_endpoint}/$ARCH/
PACKAGE_MANAGER_VERSION=$(rpm --queryformat '%{VERSION}-%{RELEASE}\n' -qp $(find *.rpm | egrep "\.$ARCH\.rpm" | head -1))

# write json file with build info
cat > $WORKSPACE/repo-extra.json << EOF
{
    "version":"$VERSION",
    "package_manager_version":"$PACKAGE_MANAGER_VERSION",
    "build_url":"$BUILD_URL",
    "root_build_cause":"$ROOT_BUILD_CAUSE",
    "node_name":"$NODE_NAME",
    "job_name":"$JOB_NAME"
}
EOF
# post the json to repo-extra json to chacra
curl -X POST -H "Content-Type:application/json" --data "@$WORKSPACE/repo-extra.json" -u $CHACRACTL_USER:$CHACRACTL_KEY ${chacra_url}repos/${chacra_endpoint}/extra/

# start repo creation
$VENV/chacractl repo update ${chacra_endpoint}

echo Check the status of the repo at: https://shaman.ceph.com/api/repos/${chacra_endpoint}
