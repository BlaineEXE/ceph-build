# Only do actual work when we are a DEB distro
if test -f /etc/redhat-release ; then
    exit 0
fi

export GNUPGHOME=/home/jenkins-build/build/gnupg.ceph-release/
export KEYID=17ED316D
HOST=$(hostname --short)
echo "Building on $(hostname) Date: $(date)"
echo "  DIST=${DIST}"
echo "  BPTAG=${BPTAG}"
echo "  KEYID=${KEYID}"
echo "  WS=$WORKSPACE"
echo "  PWD=$(pwd)"
echo "  BUILD SOURCE=$COPYARTIFACT_BUILD_NUMBER_CEPH_SETUP"
echo "*****"
env
echo "*****"

if [ ! -d /srv/ceph-build ] ; then
    echo "Build tools are not installed"
    exit 1
fi
bindir=/srv/ceph-build

vers=`cat ./dist/version`
# create a release directory for ceph-build tools
mkdir -p release
cp -a dist release/${vers}
echo $DIST > release/${vers}/debian_dists
echo "${vers}-1" > release/${vers}/debian_version

cd release/$vers

# Dirty Hack:
baddist=$(echo $DIST | grep -ic -e squeeze -e wheezy || true)
if [ $baddist -eq 1 ]
then
    sed -i 's/ libbabeltrace-ctf-dev, libbabeltrace-dev,//g' ceph_${vers}-1.dsc || true
    sed -i 's/ liblttng-ust-dev//g' ceph_${vers}-1.dsc || true

fi

# unpack sources
dpkg-source -x ceph_${vers}-1.dsc
if [ $baddist -eq 1 ]
then
    rm -vf *.orig.tar.gz || true
    grep -v babeltrace ceph-${vers}/debian/control  | grep -v liblttng > ceph-${vers}/debian/control.new
    mv -v ceph-${vers}/debian/control.new ceph-${vers}/debian/control
fi
(  cd ceph-${vers}
   DEB_VERSION=$(dpkg-parsechangelog | sed -rne 's,^Version: (.*),\1, p')
   BP_VERSION=${DEB_VERSION}${BPTAG}
   DEBEMAIL="gary.lowell@inktank.com" dch -D $DIST --force-distribution -b -v "$BP_VERSION" "$comment"
)
dpkg-source -b ceph-${vers}

echo "Building Debian"
cd "$WORKSPACE"
# Before, at this point, this script called the below contents that
# was part of /srv/ceph-buid/build_debs.sh. Now everything is in here, in one
# place, no need to checkout/clone anything. WYSIWYG::
#
#    sudo $bindir/build_debs.sh ./release /srv/debian-base $vers


releasedir="./release"
pbuilddir="/srv/debian-base"
cephver=$vers

start_time=`date`
echo version $cephver

whoami=`whoami`
[ "$whoami" != "root" ] && echo "must run as root not $whoami" && usage && exit 1

[ -z "$dists" ] && dists=`cat $releasedir/$cephver/debian_dists`
dvers=`cat $releasedir/$cephver/debian_version`
echo deb vers $dvers
echo dists $dists

for dist in $dists
do
    pbuilder --clean

    bpvers=`$bindir/gen_debian_version.sh $dvers $dist`
    echo deb vers $bpvers

    echo building debs for $dist
    if [ `dpkg-architecture -qDEB_BUILD_ARCH` = "i386" ] ; then
        #  Architecture dependent, independent and source
        pbuilder build \
            --distribution $dist \
            --basetgz $pbuilddir/$dist.tgz \
            --buildresult $releasedir/$cephver \
            --debbuildopts "-j`grep -c processor /proc/cpuinfo`" \
            $releasedir/$cephver/ceph_$bpvers.dsc
    else
        #  Binary only architecture dependent
        pbuilder build \
            --binary-arch \
            --distribution $dist \
            --basetgz $pbuilddir/$dist.tgz \
            --buildresult $releasedir/$cephver \
            --debbuildopts "-j`grep -c processor /proc/cpuinfo`" \
            $releasedir/$cephver/ceph_$bpvers.dsc
    fi

done

# do lintian checks
for dist in $dists
do
    bpvers=`$bindir/gen_debian_version.sh $dvers $dist`
    echo lintian checks for $bpvers
    echo lintian --allow-root $releasedir/$cephver/*$bpvers*.deb
done

echo "Start Time = $start_time"
echo "  End Time = $(date)"


#Collect Artifacts
mkdir -p dist/debian
cp -a release/$vers/*.changes dist/debian/.
cp -a release/$vers/*.deb     dist/debian/.
cp -a release/$vers/*.dsc     dist/debian/.
cp -a release/$vers/*.diff.gz dist/debian/.
cp -a release/$vers/*.tar.gz  dist/debian/.

echo "End Date: $(date)"
