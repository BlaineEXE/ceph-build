#!/bin/bash
# There has to be a better way to do this than this script which just looks
# for every Vagrantfile in scenarios and then just destroys whatever is left.


cd $WORKSPACE/src/ceph-volume/ceph_volume/tests/functional

scenarios=$(find . | grep Vagrantfile | xargs dirname)

mkdir -p $WORKSPACE/logs

pkgs=( "ansible" )
install_python_packages "pkgs[@]"

for scenario in $scenarios; do
    cd $scenario
    if [ -f "./vagrant_ssh_config" ]; then
        export ANSIBLE_SSH_ARGS='-F ./vagrant_ssh_config'
        $VENV/ansible -i hosts -b -m fetch -a "src=/var/log/ceph/ceph-volume.log dest=$WORKSPACE/logs/ceph-volume.log flat=yes fail_on_missing=no" osds
        $VENV/ansible -i hosts -b -m fetch -a "src=/var/log/ceph/ceph-volume-systemd.log dest=$WORKSPACE/logs/ceph-volume-systemd.log flat=yes fail_on_missing=no" osds
    fi
    vagrant destroy -f
    cd -
done

# Sometimes, networks may linger around, so we must ensure they are killed:
networks=`sudo virsh net-list --all | grep active | egrep -v "(default|libvirt)" | cut -d ' ' -f 2`
for network in $networks; do
    sudo virsh net-destroy $network || true
    sudo virsh net-undefine $network || true
done

