---
- name: ensure sites-available for nginx
  file:
    path: /etc/nginx/sites-available
    state: directory
  sudo: true

- name: ensure there is an nginx user
  user:
    name: nginx
    comment: "Nginx user"
  sudo: true

- name: ensure sites-enable for nginx
  file:
    path: /etc/nginx/sites-enabled
    state: directory
  sudo: true

- name: remove default nginx site
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  sudo: true

- name: write nginx.conf
  template:
    src: ../templates/nginx.conf
    dest: /etc/nginx/nginx.conf
  sudo: true

- name: enable nginx
  sudo: true
  service:
    name: nginx
    enabled: true

- name: create nginx site config
  template:
    src: "../templates/nginx_balancer.conf"
    dest: "/etc/nginx/sites-available/{{ item.name }}.conf"
  sudo: true
  with_items: nginx_upstreams
  notify:
    - restart nginx

- name: link nginx config
  file:
    src: "/etc/nginx/sites-available/{{ item.name }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ item.name }}.conf"
    state: link
  sudo: true
  with_items: nginx_upstreams

- name: ensure ssl certs directory
  file:
    dest: /etc/ssl/certs
    state: directory
  sudo: true

- name: ensure ssl private directory
  file:
    dest: /etc/ssl/private
    state: directory
  sudo: true

- name: check for SSL cert
  stat:
    path: "/etc/ssl/certs/{{ fqdn }}-bundled.crt"
  ignore_errors: true
  register: ssl_cert

- name: copy SSL cert
  copy:
    src: "{{ item.ssl_cert }}"
    dest: "/etc/ssl/certs/{{ item.hostname }}-bundled.crt"
    mode: 0777
  when: ssl_hosts is defined
  with_items: ssl_hosts
  sudo: true
  notify: restart nginx

- name: copy SSL key
  copy:
    src: "{{ item.ssl_key }}"
    dest: "/etc/ssl/private/{{ item.hostname }}.key"
  when: ssl_hosts is defined
  with_items: ssl_hosts
  sudo: true
  notify: restart nginx

- name: ensure nginx is restarted
  sudo: true
  service:
    name: nginx
    state: restarted
