#!/usr/bin/env bash

#
# This script uses Jenkins Job Builder to generate the configuration for its own
# job so that it automatically configures all other jobs that have their YAML
# definitions.
#

set -ex

# the following two methods exist in scripts/build_utils.sh
pkgs=( "jenkins-job-builder==2.0.0.0b2" )
install_python_packages "pkgs[@]"

# Wipe out JJB's cache if $FORCE is set.
[ "$FORCE" = true ] && rm -rf "$HOME/.cache/jenkins_jobs/"

# workaround for https://issues.jenkins-ci.org/browse/JENKINS-16225
JENKINS_URL=${JENKINS_URL:-"https://jenkins.ceph.com/"}
JJB_CONFIG="$HOME/.jenkins_jobs.ini"

# slap the programatically computed JJB config using env vars from Jenkins
cat > $JJB_CONFIG << EOF
[jenkins]
user=$JOB_BUILDER_USER
password=$JOB_BUILDER_PASS
url=$JENKINS_URL
EOF

# Test every definition if available in the current repository and update the jobs
# if they do define one (they should always define their definitions)
for dir in `find . -maxdepth 1 -path ./.git -prune -o -type d -print`; do
    definitions_dir="$dir/config/definitions"
    if [ -d "$definitions_dir" ]; then
        echo "found definitions directory: $definitions_dir"

        # Test the definitions first
        $VENV/jenkins-jobs --log_level DEBUG --conf $JJB_CONFIG test $definitions_dir -o /tmp/output

        # Update Jenkins with the output if they passed the test phase
        # Note that this needs proper permissions with the right credentials to the
        # correct Jenkins instance.
        $VENV/jenkins-jobs --log_level DEBUG --conf $JJB_CONFIG update $definitions_dir
    fi
done
